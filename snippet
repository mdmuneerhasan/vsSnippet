{
	"print": {
		"prefix": "coutln",
		"body": [
		  "cout << $1<<endl;"
		],
		"description": "print"
	  },
	  "new code": {
		"prefix": "newc",
		"body": [
		  "#include<bits/stdc++.h>",
		  "using namespace std;",
		  "#define int long long int",
		  "#define db(...) __f(#__VA_ARGS__, __VA_ARGS__)",
		  "",
		  "template <typename Arg1>",
		  "void __f(const char* name, Arg1&& arg1) { cout << name << \" : \" << arg1 << '\\n'; }",
		  "template <typename Arg1, typename... Args>",
		  "void __f(const char* names, Arg1&& arg1, Args&&... args) {",
		  "    const char* comma = strchr(names + 1, ',');",
		  "    cout.write(names, comma - names) << \" : \" << arg1 << \" | \"; __f(comma + 1, args...);",
		  "}",
		  "vector<int> vec;",
		  "int n1,startPoint,endPoint,cnt,q,qry;",
		  "",
		  "int32_t main(){",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(NULL);cout.tie(NULL);",
		  "    int t;",
		  "    //cin >>t;    while (t--)",
		  "    {",
		  "      int n;",
		  "      //cin >> n;",
		  "      ",
		  "    }",
		  "    return 0;",
		  "}"
		],
		"description": "new code"
	  },
	  "loop1": {
		"prefix": "fori",
		"body": [
		  "for(int i=0;i<${1:n};i++){",
		  "",
		  "}"
		],
		"description": "loop"
	  },
	  "loop2": {
		"prefix": "forj",
		"body": [
		  "for(int j=0;j<${1:n};j++){",
		  "",
		  "}"
		],
		"description": "loop"
	  },

	  "loop3": {
		"prefix": "fork",
		"body": [
		  "for(int k=0;k<${1:n};k++){",
		  "",
		  "}"
		],
		"description": "loop"
	  },

	  "loop4": {
		"prefix": "forl",
		"body": [
		  "for(int l=0;l<${1:n};l++){",
		  "",
		  "}"
		],
		"description": "loop"
	  },
	  "global vector": {
		"prefix": "arr",
		"body": [
		  "cin >>${1:n1};",
		  "vec.clear();",
		  "vec.resize(${1:n1},0);",
		  "for(int q=0;q<${1:n1};q++){",
		  "  cin >> vec[q];",
		  "}"
		],
		"description": "set vector"
	  },
	  "print vector": {
		"prefix": "show",
		"body": [
			"q=0;",
			  "for(auto x:${1:vec}){",
				"    cout <<q++<<\":\"<< x<<\", \";",
		  "}",
		  "cout <<endl;",
		  ""
		],
		"description": "print vector"
	  },
	  "print vector2": {
		"prefix": "showln",
		"body": [
		"q=0;",
		  "for(auto x:${1:vec}){",
		  "    cout <<q++<<\":\"<< x<<endl;",
		  "}",
		  "cout <<endl;",
		  ""
		],
		"description": "print vector"
	  },
	  "2d vector": {
		"prefix": "arr2",
		"body": [
		  "int row,col;",
		  "cin >>row >> col;",
		  "vector<vector<int>> ${1:arr2};",
		  "${1:arr2}.resize(row,vector<int>(col,0));",
		  "for(int q=0;q<row;q++){",
		  "  for(int r=0;r<col;r++){",
		  "    cin  >> ${1:arr2}[q][r];",
		  "  }",
		  "}"
		],
		"description": "2d vector"
	  },
	  "show 2d vector": {
		"prefix": "show2",
		"body": [
		  "for(int q=0;q<${1:arr2}.size();q++){",
		  "  for(int r=0;r<${1:arr2}[0].size();r++){",
		  "    cout  << ${1:arr2}[q][r]<<\" \";",
		  "  }",
		  "  cout <<endl;",
		  "}",
		  "cout << endl;"
		],
		"description": "show 2d vector"
	  },
	  "querries": {
		"prefix": "cases",
		"body": [
		  "cin >> qry;",
		  "int l,r,val,index,cse;",
		  "while(qry--){",
		  "   cin >> cse;",
		  "   switch(cse){",
		  "   case 1:",
		  "",
		  "     ",
		  "   break;",
		  "    }",
		  "}"
		],
		"description": "querries"
	  }

}
