{
	"print": {
		"prefix": "coutln",
		"body": [
		  "cout << $1<<endl;"
		],
		"description": "print"
	  },
	  "new code": {
		"prefix": "newc",
		"body": [
		  "#include<bits/stdc++.h>",
		  "using namespace std;",
		  "#define int long long int",
		  "stringstream vin,vout;",
		  "#define db(...) __f(#__VA_ARGS__, __VA_ARGS__)",
		  "",
		  "template <typename Arg1>",
		  "void __f(const char* name, Arg1&& arg1) { cout << name << \" : \" << arg1 << '\\n'; }",
		  "template <typename Arg1, typename... Args>",
		  "void __f(const char* names, Arg1&& arg1, Args&&... args) {",
		  "    const char* comma = strchr(names + 1, ',');",
		  "    cout.write(names, comma - names) << \" : \" << arg1 << \" | \"; __f(comma + 1, args...);",
		  "}",
		  "vector<int> vec;",
		  "int n,n1,n2,startPoint,k,endPoint,ans=0,cnt=0,q=0,qry=0;",
		  "",
		  "int32_t main(){",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(NULL);cout.tie(NULL);",
		  "    int t;",
		  "    //cin >>t;    while (t--)",
		  "    {",
		  "      //cin >> n;",
		  "      ",
		  "    }",
		  "    return 0;",
		  "}"
		],
		"description": "new code"
	  },
	  "loop1": {
		"prefix": "fori",
		"body": [
		  "for(int i=0;i<${1:n};i++){",
		  "",
		  "}"
		],
		"description": "loop"
	  },
	  "loop2": {
		"prefix": "forj",
		"body": [
		  "for(int j=0;j<${1:n};j++){",
		  "",
		  "}"
		],
		"description": "loop"
	  },"add graph": {
		"prefix": "graphin",
		"body": [
		  "adjList.clear();",
		  "visited.clear();",
		  "cin >>nodes>>edges;",
		  "for(int i=0;i<edges;i++){",
		  "		cin >> startPoint >> endPoint;",
		  "		adjList[startPoint].push_back(endPoint);",
		  "		adjList[endPoint].push_back(startPoint);",
		  "} ",
		  "show();",
		  ""
		],
		"description": "add graph"
	  },
	  "show graph": {
		"prefix": "showgraph",
		"body": [
		  "int nodes,edges;",
		  "unordered_map<int,int> visited;",
		  "unordered_map<int,list<int>> adjList;",
		  "void show(){",
		  "    for(auto x:adjList){",
		  "        cout<< x.first << \"->\";",
		  "        for(auto y:x.second){",
		  "            cout << y <<\",\";",
		  "        }",
		  "        cout <<endl;",
		  "    }",
		  "}",
		  "int dfs(int src,int par){",
		  "    visited[src]=1;",
		  "    int k=0;",
		  "	cout << src << \" \";",
		  "    for(auto x: adjList[src]){",
		  "        if(x!=par){",
		  "            if(!visited[x]){",
		  "                k+=dfs(x,src);",
		  "            }",
		  "        }",
		  "    }",
		  "    return k;",
		  "}",
		  ""
		],
		"description": "add graph"
	  }
	  ,
	  "loop3": {
		"prefix": "fork",
		"body": [
		  "for(int k=0;k<${1:n};k++){",
		  "",
		  "}"
		],
		"description": "loop"
	  },

	  "loop4": {
		"prefix": "forl",
		"body": [
		  "for(int l=0;l<${1:n};l++){",
		  "",
		  "}"
		],
		"description": "loop"
	  },
	  "global vector": {
		"prefix": "vec",
		"body": [
		  "cin >>${1:n1};",
		  "vec.clear();",
		  "vec.resize(${1:n1},0);",
		  "for(int q=0;q<${1:n1};q++){",
		  "  cin >> vec[q];",
		  "}"
		],
		"description": "set vector"
	  },
	  "print vector": {
		"prefix": "showv",
		"body": [
			"q=0;",
			  "for(auto x:${1:vec}){",
				"    cout <<q++<<\":\"<< x<<\", \";",
		  "}",
		  "cout <<endl;",
		  ""
		],
		"description": "print vector"
	  },
	  "print vector2": {
		"prefix": "showvln",
		"body": [
		"q=0;",
		  "for(auto x:${1:vec}){",
		  "    cout <<q++<<\":\"<< x<<endl;",
		  "}",
		  "cout <<endl;",
		  ""
		],
		"description": "print vector"
	  },
	  "2d vector": {
		"prefix": "arr2",
		"body": [
		  "int row,col;",
		  "cin >>row >> col;",
		  "vector<vector<int>> ${1:arr2};",
		  "${1:arr2}.resize(row,vector<int>(col,0));",
		  "for(int q=0;q<row;q++){",
		  "  for(int r=0;r<col;r++){",
		  "    cin  >> ${1:arr2}[q][r];",
		  "  }",
		  "}"
		],
		"description": "2d vector"
	  },
	  "show 2d vector": {
		"prefix": "show2",
		"body": [
		  "for(int q=0;q<row;q++){",
		  "  for(int r=0;r<col;r++){",
		  "    cout  << ${3:arr2}[q][r]<<\" \";",
		  "  }",
		  "  cout <<endl;",
		  "}",
		  "cout << endl;"
		],
		"description": "show 2d vector"
	  },
	  "querries": {
		"prefix": "cases",
		"body": [
		  "cin >> qry;",
		  "int l,r,val,index,cse=1;",
		  "while(qry--){",
		  "   cin >> cse;",
		  "   switch(cse){",
		  "   case 1:",
		  "",
		  "     ",
		  "   break;",
		  "    }",
		  "}"
		],
		"description": "querries"
	  },

	  "debugger": {
		"prefix": "db",
		"body": [
		  "#define db(...) __f(#__VA_ARGS__, __VA_ARGS__)",
		  "",
		  "template <typename Arg1>",
		  "void __f(const char* name, Arg1&& arg1) { cout << name << \" : \" << arg1 << '\\n'; }",
		  "template <typename Arg1, typename... Args>",
		  "void __f(const char* names, Arg1&& arg1, Args&&... args) {",
		  "    const char* comma = strchr(names + 1, ',');",
		  "    cout.write(names, comma - names) << \" : \" << arg1 << \" | \"; __f(comma + 1, args...);",
		  "}"
		],
		"description": "debugger"
	  },
	  "take in array": {
		"prefix": "arr",
		"body": [
		  "  cin >> ${2:n1};",
		  "  int ${1:arr}[${2:n1}];",
		  "  for(int i=0;i<${2:n1};i++){",
		  "    cin >> ${1:arr}[i];",
		  "  }",
		  "",
		  ""
		],
		"description": "take in array"
	  },

	  "show array": {
		"prefix": "show",
		"body": [
		  "for(int i=0;i<${2:n1};i++){",
		  "    cout << i <<\":\"<<${1:arr}[i] << \", \";",
		  "}",
		  "cout <<endl;",
		  "",
		  ""
		],
		"description": "show array"
	  },

	  "show array linewise": {
		"prefix": "showln",
		"body": [
		  "for(int i=0;i<${2:n1};i++){",
		  "    cout << i <<\":\"<<${1:arr}[i] << \",\\n\";",
		  "}",
		  "cout <<endl;",
		  ""
		],
		"description": "show array"
	  },
	  "draw Tree": {
		"prefix": "binarytree",
		"body": [
		  "struct Node",
		  "{",
		  "    int data;",
		  "    Node * left;",
		  "    Node * right;",
		  "    Node(){",
		  "        left=NULL;",
		  "        right=NULL;",
		  "    }",
		  "};",
		  "Node * build(){",
		  "    Node * node=new Node();",
		  "    cin >>node->data;",
		  "    string left,right;",
		  "    cin >> left;",
		  "    if(left.compare(\"true\")==0){",
		  "        node->left=build();",
		  "        // cout << node->left->data;",
		  "    }",
		  "    cin >> right;",
		  "    if(right.compare(\"true\")==0){",
		  "        node->right=build();",
		  "        // cout << node->right->data;",
		  "    }",
		  "    return node;",
		  "}",
		  "void print(Node * node,string indent=\"\",string child=\"\"){",
		  "    if(node==NULL)return;",
		  "    cout <<\"\\n\"<<indent<<\"`---\"<< node->data;",
		  "    if(child.size()!=0)cout<<'{'<<child<<\"}\";",
		  "    print(node->left,\"\\t\"+indent,\"l\");",
		  "    print(node->right,\"\\t\"+indent,\"r\");",
		  "    return;",
		  "}"
		],
		"description": "draw Tree"
	  },
	  "print map": {
		"prefix": "showm",
		"body": [
		  "for(auto x:${dp}){",
			"    cout << x.first <<\":\"<<x.second<<endl;",
			"}",
			"cout <<endl;"
		],
		"description": "print map"
	  },
	  "power": {
		"prefix": "power",
		"body": [
		  "#define MOD 1000000007",
		  "int power(int a,int p){",
		  "    if(p==1){",
		  "        return a%MOD;",
		  "    }",
		  "    int ans=power(a,p/2)%MOD;",
		  "    ans=ans*ans;",
		  "    ans%=MOD;",
		  "    if(p&1){",
		  "        ans=ans*a;",
		  "        ans%=MOD;",
		  "    }",
		  "    return ans;",
		  "}",
		  ""
		],
		"description": "power"
	  },
	  "print segment tree": {
		"prefix": "showseg",
		"body": [
		  "void print(int par=0,string indent=\"\",string child=\"\"){",
		  "    if(par>=${1:vec}.size())return;",
		  "    cout <<\"\\n\"<<indent<<\"`---\"<<${1:vec}[par];",
		  "    if(child.size()!=0)cout<<'{'<<child<<\"}\";",
		  "    print(2*par+1,\"\\t\"+indent,\"l\");",
		  "    print(2*par+2,\"\\t\"+indent,\"r\");",
		  "    return;",
		  "}"
		],
		"description": "print segment tree"
	  },
	  "File reader and writer": {
		"prefix": "reader",
		"body": [
		  "",
		  "string s;",
		  "int sz=0;",
		  "void read(string path){",
		  "        ifstream fin(path);",
		  "        string line;",
		  "        while (getline(fin,line))",
		  "        {",
		  "            stringstream kin(line);",
		  "            while(kin>>s){",
		  "                vin<<s+\" \";",
		  "                sz++;",
		  "            }",
		  "        }",
		  "        fin.close();",
		  "}",
		  "void write(string path){",
		  "        ofstream fout(path);",
		  "        fout<<vout.str();",
		  "        fout.close();",
		  "}",
		  ""
		],
		"description": "File reader and writer"
	  }
}
